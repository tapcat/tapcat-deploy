user www-data;
worker_processes 2;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
	use epoll;
}

http {

upstream backend {
	server api.tapcat.net:8080 fail_timeout=5s;
	server api.tapcat.net:8081 backup;
}

server {
    listen  80;
    server_name api.tapcat.net www.api.tapcat.net;
    
    location / {
        #CORS http://enable-cors.org/server_nginx.html
	# for any domain based on tapcat.net and dev.tapcat.net:9000
	if ($http_origin ~* "(^https?://(dev\.)?tapcat\.net(:\d\d\d)?)") {
	  set $cors "true";
	}

       # Nginx doesn't support nested If statements, so we use string
       # concatenation to create a flag for compound conditions

       # OPTIONS indicates a CORS pre-flight request
       if ($request_method = 'OPTIONS') {
         set $cors "${cors}options";  
       }

       # non-OPTIONS indicates a normal CORS request
       if ($request_method = 'GET') {
         set $cors "${cors}get";  
       }
       
       if ($request_method = 'POST') {
         set $cors "${cors}post";
       }

       # if it's a GET or POST, set the standard CORS responses header
    if ($cors = "trueget") {
        more_set_headers 'Access-Control-Allow-Origin: $http_origin' 'Access-Control-Allow-Credentials: true';
        # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
    }

    if ($cors = "truepost") { 
        more_set_headers 'Access-Control-Allow-Origin: $http_origin' 'Access-Control-Allow-Credentials: true';
#	add_header 'Access-Control-Expose-Headers' ' ';
    }

    # if it's OPTIONS, then it's a CORS preflight request so respond immediately with no response body
    if ($cors = "trueoptions") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)
        add_header 'Access-Control-Allow-Credentials' 'true';

        #
        # Return special preflight info
        #
        
        # Tell browser to cache this pre-flight info for 20 days
        add_header 'Access-Control-Max-Age' 1728000;

        # Tell browser we respond to GET,POST,OPTIONS in normal CORS requests.
        #
        # Not officially needed but still included to help non-conforming browsers.
        #
        # OPTIONS should not be needed here, since the field is used
        # to indicate methods allowed for "actual request" not the
        # preflight request.
        #
        # GET,POST also should not be needed, since the "simple
        # methods" GET,POST,HEAD are included by default.
        #
        # We should only need this header for non-simple requests
        # methods (e.g., DELETE), or custom request methods (e.g., XMODIFY)
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        
        add_header 'Access-Control-Allow-Headers' 'X-Requested-With,Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

        # build entire response to the preflight request
        # no body in this response
        add_header 'Content-Length' 0;
        # (should not be necessary, but included for non-conforming browsers)
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        # indicate successful return with no content
        return 204;
    }
	 proxy_pass http://backend;
	 proxy_set_header   X-Real-IP $remote_addr;
	 proxy_set_header   Host $http_host:$proxy_port;
	 proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    }																							    
}
	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	include /usr/local/etc/nginx/sites-enabled/*;
}
